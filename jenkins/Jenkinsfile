pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_AUTH_TOKEN}
                    """
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Deploy to Hadoop') {
            when {
                expression {
                    currentBuild.resultIsBetterOrEqualTo('SUCCESS')
                }
            }
            steps {
                script {
                    sh '''
                        kubectl cp src/hadoop-job hadoop-master-pod:/tmp/
                        kubectl exec hadoop-master-pod -- /bin/bash -c "hadoop jar /opt/hadoop/share/hadoop/tools/lib/hadoop-streaming-*.jar \
                            -files /tmp/hadoop-job/mapper.py,/tmp/hadoop-job/reducer.py \
                            -mapper /tmp/hadoop-job/mapper.py \
                            -reducer /tmp/hadoop-job/reducer.py \
                            -input /input/data \
                            -output /output/result"
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}